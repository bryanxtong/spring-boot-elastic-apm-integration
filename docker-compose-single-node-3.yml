version: "2.2"
#apm connects to elasticsearch using https and It is also using https itself https://localhost:8200
services:
  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: apm-server\n"\
               "    dns:\n"\
               "      - apm-server\n"\
               "      - localhost\n"\
               "    ip:\n"\
               "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        chown -R root:root config/certs;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120

  es01:
    depends_on:
      setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata01:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    environment:
      - "node.name=es01"
      - "discovery.type=single-node"
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  kibana:
    depends_on:
      es01:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    volumes:
      - certs:/usr/share/kibana/config/certs
      - kibanadata:/usr/share/kibana/data
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://es01:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
    mem_limit: ${MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  apm-server:
    image: docker.elastic.co/apm/apm-server:${STACK_VERSION}
    volumes:
      #- "certs:/usr/share/apm-server/config/certs:ro"
      #- "/apm-server.docker.yml:/usr/share/apm-server/apm-server.yml:ro"
      - "./apm-server/apm-server.key:/usr/share/apm-server/config/certs/apm-server.key:ro"
      - "./apm-server/apm-server.crt:/usr/share/apm-server/config/certs/apm-server.crt:ro"
      - "./es01/es01.key:/usr/share/apm-server/config/certs/es01.key:ro"
      - "./es01/es01.crt:/usr/share/apm-server/config/certs/es01.crt:ro"
      - "./ca/ca.crt:/usr/share/apm-server/config/certs/ca/ca.crt:ro"
      - "./ca/ca.key:/usr/share/apm-server/config/certs/ca/ca.key:ro"
    ports:
      - "8200:8200"
    command: [
      "apm-server", "-e",
      "-E", "apm-server.host=0.0.0.0:8200",
      "-E", "apm-server.ssl.enabled=true",
      "-E", "apm-server.ssl.certificate=config/certs/apm-server.crt",
      "-E", "apm-server.ssl.key=config/certs/apm-server.key",
      "-E", "apm-server.ssl.certificate_authorities: ['config/certs/ca/ca.crt']",
      "-E", "output.elasticsearch.username=elastic",
      "-E", 'output.elasticsearch.password="${APM_PASSWORD}"',
      "-E", "output.elasticsearch.ssl.certificate=config/certs/es01.crt",
      "-E", "output.elasticsearch.ssl.key=config/certs/es01.key",
      "-E", "output.elasticsearch.ssl.certificate_authorities=config/certs/ca/ca.crt",
      "-E", "output.elasticsearch.hosts=['https://es01:9200']"
    ]
    environment:
      - node.name=apm-server
      - strict.perms=false
      - setup.kibana.host="kibana:5601"
      - setup.template.enabled=true
      - logging.to_files=false
    depends_on:
      es01:
        condition: service_healthy
      kibana:
        condition: service_healthy

volumes:
  certs:
    driver: local
  esdata01:
    driver: local
  kibanadata:
    driver: local